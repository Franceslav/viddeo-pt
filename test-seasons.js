// –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–∑–æ–Ω–æ–≤ –∏ —ç–ø–∏–∑–æ–¥–æ–≤
const BASE_URL = 'http://localhost:3003/api'

async function createTestData() {
  console.log('üß™ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...\n')

  try {
    // 1. –°–æ–∑–¥–∞–µ–º —Å–µ–∑–æ–Ω
    console.log('1Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º —Å–µ–∑–æ–Ω...')
    const seasonResponse = await fetch(`${BASE_URL}/seasons`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        title: "–¢–µ—Å—Ç–æ–≤—ã–π —Å–µ–∑–æ–Ω 1",
        description: "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Å–µ–∑–æ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏",
        seasonNumber: 1
      })
    })
    
    const seasonResult = await seasonResponse.json()
    console.log('‚úÖ –°–µ–∑–æ–Ω —Å–æ–∑–¥–∞–Ω:', seasonResult.success ? 'SUCCESS' : 'FAILED')
    if (!seasonResult.success) {
      console.log('‚ùå –û—à–∏–±–∫–∞:', seasonResult.error)
      return
    }
    
    const seasonId = seasonResult.season.id
    console.log('üì∫ ID —Å–µ–∑–æ–Ω–∞:', seasonId)

    // 2. –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–ø–∏–∑–æ–¥–æ–≤
    console.log('\n2Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º —ç–ø–∏–∑–æ–¥—ã...')
    const episodes = [
      {
        title: "–≠–ø–∏–∑–æ–¥ 1: –ù–∞—á–∞–ª–æ",
        description: "–ü–µ—Ä–≤—ã–π —ç–ø–∏–∑–æ–¥ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ–∑–æ–Ω–∞",
        episodeNumber: 1,
        url: "https://res.cloudinary.com/drysqeckp/video/upload/v1758292003/samples/dance-1.mp4"
      },
      {
        title: "–≠–ø–∏–∑–æ–¥ 2: –†–∞–∑–≤–∏—Ç–∏–µ",
        description: "–í—Ç–æ—Ä–æ–π —ç–ø–∏–∑–æ–¥ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ–∑–æ–Ω–∞",
        episodeNumber: 2,
        url: "https://res.cloudinary.com/drysqeckp/video/upload/v1758292003/samples/dance-2.mp4"
      },
      {
        title: "–≠–ø–∏–∑–æ–¥ 3: –ö—É–ª—å–º–∏–Ω–∞—Ü–∏—è",
        description: "–¢—Ä–µ—Ç–∏–π —ç–ø–∏–∑–æ–¥ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ–∑–æ–Ω–∞",
        episodeNumber: 3,
        url: "https://res.cloudinary.com/drysqeckp/video/upload/v1758292003/samples/dance-3.mp4"
      }
    ]

    for (const episode of episodes) {
      console.log(`   –°–æ–∑–¥–∞–µ–º ${episode.title}...`)
      const episodeResponse = await fetch(`${BASE_URL}/episodes`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          ...episode,
          seasonId: seasonId,
          userId: "68cd5083cc68d605646fe95e"
        })
      })
      
      const episodeResult = await episodeResponse.json()
      console.log(`   ‚úÖ ${episode.title}:`, episodeResult.success ? 'SUCCESS' : 'FAILED')
      if (!episodeResult.success) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞:`, episodeResult.error)
      }
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ–∑–æ–Ω —Å–æ–∑–¥–∞–ª—Å—è —Å —ç–ø–∏–∑–æ–¥–∞–º–∏
    console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å–µ–∑–æ–Ω...')
    const checkResponse = await fetch(`${BASE_URL}/seasons`)
    const checkResult = await checkResponse.json()
    
    if (checkResult.success) {
      const testSeason = checkResult.seasons.find(s => s.id === seasonId)
      if (testSeason) {
        console.log(`‚úÖ –°–µ–∑–æ–Ω –Ω–∞–π–¥–µ–Ω: ${testSeason.title}`)
        console.log(`üìä –≠–ø–∏–∑–æ–¥–æ–≤ –≤ —Å–µ–∑–æ–Ω–µ: ${testSeason.episodes.length}`)
        console.log(`üîó URL –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: http://localhost:3003/gallery/season/${seasonId}`)
      } else {
        console.log('‚ùå –°–µ–∑–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω')
      }
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ–∑–æ–Ω–æ–≤:', checkResult.error)
    }

  } catch (error) {
    console.log('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error.message)
  }

  console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!')
  console.log('\nüåê –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ:')
  console.log('   - http://localhost:3003/gallery - –≥–∞–ª–µ—Ä–µ—è')
  console.log('   - http://localhost:3003/gallery/season/[season_id] - –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–µ–∑–æ–Ω')
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
createTestData().catch(console.error)
